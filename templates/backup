	var endolor_dataset;
	var endolor_svg;
	var endolor_defs;
	var radiusOutwardMult_endolor = 0.9;
	var endolor_measures = [{"index": 0, "ballet": "endolor", "ymin": 34.0487954952, "ymax": 638.5292828908, "label": "measure_3", "step_length": 604.4804873956, "img_num": "1", "img_staff_num": "1", "staff_num": 1, "measure_num": "3"}, {"index": 1, "ballet": "endolor", "ymin": 1236.1019820257, "ymax": 1351.0379064737, "label": "measure_1", "step_length": 114.9359244481, "img_num": "1", "img_staff_num": "1", "staff_num": 1, "measure_num": "1"}, {"index": 2, "ballet": "endolor", "ymin": 639.4572922882, "ymax": 1242.8006414081, "label": "measure_2", "step_length": 603.3433491199, "img_num": "1", "img_staff_num": "1", "staff_num": 1, "measure_num": "2"}, {"index": 21, "ballet": "endolor", "ymin": 643.6398418854, "ymax": 1251.5226170943, "label": "measure_4", "step_length": 607.8827752088, "img_num": "1", "img_staff_num": "2", "staff_num": 2, "measure_num": "4"}, {"index": 22, "ballet": "endolor", "ymin": 23.0015848747, "ymax": 642.5905802506, "label": "measure_5", "step_length": 619.5889953759, "img_num": "1", "img_staff_num": "2", "staff_num": 2, "measure_num": "5"}, {"index": 61, "ballet": "endolor", "ymin": 641.0, "ymax": 1272.6895323687, "label": "measure_6", "step_length": 631.6895323687, "img_num": "2", "img_staff_num": "1", "staff_num": 3, "measure_num": "6"}, {"index": 62, "ballet": "endolor", "ymin": 30.8058155579, "ymax": 639.2968656772, "label": "measure_7", "step_length": 608.4910501193, "img_num": "2", "img_staff_num": "1", "staff_num": 3, "measure_num": "7"}, {"index": 111, "ballet": "endolor", "ymin": 45.1976051072, "ymax": 665.3705558691, "label": "measure_9", "step_length": 620.1729507619, "img_num": "2", "img_staff_num": "2", "staff_num": 4, "measure_num": "9"}, {"index": 112, "ballet": "endolor", "ymin": 662.5951079289, "ymax": 1272.1298321106, "label": "measure_8", "step_length": 609.5347241817, "img_num": "2", "img_staff_num": "2", "staff_num": 4, "measure_num": "8"}, {"index": 151, "ballet": "endolor", "ymin": 634.8149689616, "ymax": 1254.9913409989, "label": "measure_10", "step_length": 620.1763720372, "img_num": "3", "img_staff_num": "1", "staff_num": 5, "measure_num": "10"}, {"index": 152, "ballet": "endolor", "ymin": 20.0345125564, "ymax": 635.5286223194, "label": "measure_11", "step_length": 615.494109763, "img_num": "3", "img_staff_num": "1", "staff_num": 5, "measure_num": "11"}, {"index": 189, "ballet": "endolor", "ymin": 440.0932562077, "ymax": 833.080549873, "label": "measure_13", "step_length": 392.9872936653, "img_num": "3", "img_staff_num": "2", "staff_num": 6, "measure_num": "13"}, {"index": 190, "ballet": "endolor", "ymin": 14.2452207957, "ymax": 436.316027088, "label": "measure_14", "step_length": 422.0708062923, "img_num": "3", "img_staff_num": "2", "staff_num": 6, "measure_num": "14"}, {"index": 191, "ballet": "endolor", "ymin": 832.3723194131, "ymax": 1246.4395457111, "label": "measure_12", "step_length": 414.067226298, "img_num": "3", "img_staff_num": "2", "staff_num": 6, "measure_num": "12"}, {"index": 254, "ballet": "endolor", "ymin": 661.3766489137, "ymax": 958.0045146727, "label": "measure_16", "step_length": 296.627865759, "img_num": "4", "img_staff_num": "1", "staff_num": 7, "measure_num": "16"}, {"index": 255, "ballet": "endolor", "ymin": 960.9796839729, "ymax": 1268.9097065463, "label": "measure_15", "step_length": 307.9300225734, "img_num": "4", "img_staff_num": "1", "staff_num": 7, "measure_num": "15"}, {"index": 256, "ballet": "endolor", "ymin": 358.9843926354, "ymax": 658.5002645316, "label": "measure_17", "step_length": 299.5158718962, "img_num": "4", "img_staff_num": "1", "staff_num": 7, "measure_num": "17"}, {"index": 257, "ballet": "endolor", "ymin": 45.7722823787, "ymax": 353.7313593397, "label": "measure_18", "step_length": 307.9590769611, "img_num": "4", "img_staff_num": "1", "staff_num": 7, "measure_num": "18"}]
	var endolor_radArr = [];
	var endolor_dataArr = [];
	var endolor_data = [];
	var endolor_dataStyling = [];
	var radialWrapperendolor;
	var circleWrapperendolor; 

	d3.json(datapath+'endolor'+".json", function(endolor_data) {
		console.log('EN DOLOR')
		// console.log(endolor_data)
			endolor_dataset = endolor_data;

				//SVG container
				endolor_svg = d3.select("#endolor-choreo-radial")
					.append("svg")
					.attr("viewBox", `0 0 400 400`)
					.append("g")
					.attr("transform", "translate(" + 200 + "," + 200 + ")");

				//Container for the gradients
				endolor_defs = endolor_svg.append("defs");

				///////////////////////////////////////////////////////////////////////////
				//////////////////////////// Create scales ////////////////////////////////
				///////////////////////////////////////////////////////////////////////////

				// Playback time
				// get the ymin of the same measure, subtract it from the step ymin, then add difference to measure num
				endolor_dataset.forEach(function(d, i) {
					measNum = +d.measure_num
					// console.log(measNum)
					// console.log(endolor_measures.filter(x=>+x.measure_num==measNum)[0])
					if (endolor_measures.filter(x=>+x.measure_num==measNum)[0] != undefined){
						meas_ymin = endolor_measures.filter(x=>+x.measure_num==measNum)[0].ymax
						step_ymin = +d.ymax
						d.playbackTime = (measNum + (step_ymin)/50) * 4
						d.theta = bodyDirectionToTheta(d.body_movement, d.direction_movement) + 50
						d.thetaRad = degrees_to_radians( bodyDirectionToTheta(d.body_movement, d.direction_movement) + 50 )
						tmp = endolor_dataset.slice(0,i).map(x=>x.thetaRad)
						if (tmp.length > 0){
							tmp = tmp.reduce((a, b) => a + b) / tmp.length;
							d.weightDist = tmp
						}else {
							d.weightDist = 0
						}
					}
				});
				
				///////////////////////////////////////////////////////////////////////////
				//////////////////////////// Radial line //////////////////////////////////
				///////////////////////////////////////////////////////////////////////////
				endolor_dataset = endolor_dataset.sort(({playbackTime:a}, {playbackTime:b}) => a-b);
				
				endolor_radArr = endolor_dataset.map(x=>(x.playbackTime)*radiusOutwardMult_endolor)
				// Nonzero radii
				endolor_radArr = endolor_radArr.filter(x=>x>0)
				
				function findClosest(num, spoke){
					if (Math.abs(num[0] - spoke) <= 0.03) return 1
				}
				for (ii = 0; ii < endolor_radArr.length; ii++) {
					if(endolor_dataset[ii].body_movement!=null){
						endolor_data = []
						for (i = 0; i <= 2+lineRes; i=i+lineRes) {
						if (randJitter) {endolor_data.push([Math.PI * i, endolor_radArr[ii] + getRandomNumber(-3.5, 3.5) ])}
						if (!randJitter) {endolor_data.push([Math.PI * i, endolor_radArr[ii] ])}
						}
						endolor_dataStyling.push({'body_movement' : endolor_dataset[ii].body_movement,
										'step_length' : endolor_dataset[ii].step_length * stepLengthMultipier,
										'playback_time': endolor_dataset[ii].playbackTime,
										'weight_dist': endolor_dataset[ii].weightDist})
						arr = spokeArrRad
						num = degrees_to_radians(endolor_dataset[ii].theta)
						var closestSpoke = arr.reduce(function(prev, curr) {
							return (Math.abs(curr - num) < Math.abs(prev - num) ? curr : prev);
						});
						
						// find theta closest to chosen spokeArr
						if (endolor_dataset[ii].direction_movement!='place'){
							index = endolor_data.findIndex(x => findClosest(x, closestSpoke));
							endolor_data[index] = [endolor_data[index][0], endolor_radArr[ii]+endolor_dataset[ii].step_length * radiusMult]
							endolor_dataArr.push({endolor_data})
						}
					}
				}
				
				radialWrapperendolor = endolor_svg.append("g")
					.attr("transform", "translate(" + 0 + "," + 0 + ")");
				circleWrapperendolor = endolor_svg.append("g")
					.attr("transform", "translate(" + 0 + "," + 0 + ")");

				for (i = 0; i < endolor_dataArr.length; i++) {
					className = "endolor"
					curRadialLineWidth = endolor_dataStyling[i].step_length
					curPlaybackTime = endolor_dataStyling[i].playback_time
					radialWrapperendolor
						.append("path")
						.attr("d", lineRadial(endolor_dataArr[i].endolor_data))
						.attr("class", className)
						.attr("transform", "rotate(" + ( -55 ) + ")")
						.attr("fill", "none")
						.attr("stroke-width", curRadialLineWidth/2)
						.attr("stroke", "black")
						.style("filter", "url(#glow)")
						.attr("opacity", 0.7)
					circleWrapperendolor
						.append("circle")
							.attr("opacity", 0.5)
							.attr("class", className)
							.attr("cy", endolor_dataArr[i].endolor_data[0][1]*Math.sin(endolor_dataStyling[i].weight_dist))
							.attr("cx", endolor_dataArr[i].endolor_data[0][1]*Math.cos(endolor_dataStyling[i].weight_dist))
							.attr("r", 1)
							.style("filter", "url(#glow)")
							.style('fill', weightCircleColor)
				}
			})